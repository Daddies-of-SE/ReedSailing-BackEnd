"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import time

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ')n&%s@g3!jpkyz@tdj*)jst3mbzhhp$7v(trttcrl5x!7il--_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


# SECURITY安全设置 - 支持http时建议开启
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_SSL_REDIRECT = True  # 将所有非SSL请求永久重定向到SSL
SESSION_COOKIE_SECURE = True  # 仅通过https传输cookie
CSRF_COOKIE_SECURE = True  # 仅通过https传输cookie
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # 严格要求使用https协议传输
SECURE_HSTS_PRELOAD = True  # HSTS为
SECURE_HSTS_SECONDS = 60
SECURE_CONTENT_TYPE_NOSNIFF = True   # 防止浏览器猜测资产的内容类型

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'BUAA.apps.BuaaConfig',
    'rest_framework',
    'django_extensions',
    'django_crontab',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

PROJECT_APPS = [
    'BUAA'
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'buaa',
        'USER': 'root',
        'PASSWORD': '12345678',  # FILL THIS
        'HOST': '127.0.0.1',  # HOST
        'POST': 3306,  # 端口

    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'my_cache_table',
    },
    # "session": {
    #     "BACKEND": "django_redis.cache.RedisCache",
    #     "LOCATION": "redis://127.0.0.1:6379/1",
    #     "OPTIONS": {
    #         "CLIENT_CLASS": "django_redis.client.DefaultClient",
    #     }
    # }
}

# SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# SESSION_CACHE_ALIAS = "session"

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# 邮件配置
EMAIL_USE_SSL = False
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True

EMAIL_HOST = 'smtp.qq.com'  # 如果是 163 改成 smtp.163.com

EMAIL_PORT = 587

EMAIL_HOST_USER = '@qq.com'  # 帐号

EMAIL_HOST_PASSWORD = ''  # 授权码（****）
# 默认邮件
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

# 允许跨域
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
#CORS_ORIGIN_WHITELIST = ('*')

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)

CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'medias').replace('\\', '/')

REST_FRAMEWORK = {
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #    'BUAA.authentication.UserAuthentication',  # 用自定义的认证类
    # ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema',

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination'

}


APPID = 'wx6e4e33e0b6db916e'
SECRET = 'fc9689a2497195707d9f85e48628b351'

CRONJOBS = [
    ('*/2 * * * *', 'BUAA.scheduled.get_access_token', '>>/home/test.log'),
]




cur_path = os.path.dirname(os.path.realpath(__file__))  # log_path是存放日志的路径

log_path = os.path.join(os.path.dirname(cur_path), 'logs')

if not os.path.exists(log_path): os.mkdir(log_path)  # 如果不存在这个logs文件夹，就自动创建一个

LOGGING = {

    'version': 1,

    'disable_existing_loggers': False,

    'formatters': {

        # 日志格式

        'standard': {

            'format': '[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] '

                      '[%(levelname)s]- %(message)s'},

        'simple': {  # 简单格式

            'format': '%(levelname)s %(message)s'

        },

    },

    # 过滤

    'filters': {

    },

    # 定义具体处理日志的方式

    'handlers': {

        # 默认记录所有日志

        'default': {

            'level': 'INFO',

            'class': 'logging.handlers.RotatingFileHandler',

            'filename': os.path.join(log_path, 'all-{}.log'.format(time.strftime('%Y-%m-%d'))),

            'maxBytes': 1024 * 1024 * 5,  # 文件大小

            'backupCount': 5,  # 备份数

            'formatter': 'standard',  # 输出格式

            'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码

        },

        # 输出错误日志

        'error': {

            'level': 'ERROR',

            'class': 'logging.handlers.RotatingFileHandler',

            'filename': os.path.join(log_path, 'error-{}.log'.format(time.strftime('%Y-%m-%d'))),

            'maxBytes': 1024 * 1024 * 5,  # 文件大小

            'backupCount': 5,  # 备份数

            'formatter': 'standard',  # 输出格式

            'encoding': 'utf-8',  # 设置默认编码

        },

        # 控制台输出

        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'filename': os.path.join(log_path, 'debug-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'formatter': 'standard',
            'encoding': 'utf-8',  # 设置默认编码
        },

        # 输出info日志

        'info': {

            'level': 'INFO',

            'class': 'logging.handlers.RotatingFileHandler',

            'filename': os.path.join(log_path, 'info-{}.log'.format(time.strftime('%Y-%m-%d'))),

            'maxBytes': 1024 * 1024 * 5,

            'backupCount': 5,

            'formatter': 'standard',

            'encoding': 'utf-8',  # 设置默认编码

        },

    },

    # 配置用哪几种 handlers 来处理日志

    'loggers': {

        # 类型 为 django 处理所有类型的日志， 默认调用

        'django': {

            'handlers': ['default', 'console'],

            'level': 'INFO',

            'propagate': False

        },

        # log 调用时需要当作参数传入

        'log': {

            'handlers': ['error', 'info', 'console', 'default'],

            'level': 'INFO',

            'propagate': True

        },

    }

}

